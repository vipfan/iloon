# >通用设置
[General]
# IPv6 支持
ip-mode = dual
ipv6-vif = auto
# UDP相关
disable-stun = true
udp-fallback-mode = REJECT
# SNI辅助规则匹配
sni-sniffing = true
# 策略组切换时关闭连接
disconnect-on-policy-change = true
# 域名拦截行为
domain-reject-mode = DNS
dns-reject-mode = LoopbackIP
# > 跳过代理
# 跳过某个域名或者 IP 段，这些目标主机将不会由 Loon Proxy 处理。
skip-proxy = localhost,*.local,passenger.t3go.cn,e.crashlytics.com,captive.apple.com,app.yinxiang.com,injections.adguard.org,local.adguard.org,cable.auth.com,www.baidu.com,yunbusiness.ccb.com,10.0.0.0/8,100.64.0.0/10,127.0.0.1/32,169.254.0.0/16,172.16.0.0/12,192.168.0.0/16,224.0.0.0/4,240.0.0.0/4,::1/128,fc00::/7,fd00::/8,fe80::/10,ff00::/8,2001::/32,2001:db8::/32,2002::/16,::ffff:0:0:0:0/1,::ffff:128:0:0:0/1
# > Always Real IP Hosts
# DNS 数据包将被转发到上游 DNS 服务器。
real-ip = *.apple.com,*apple.com
# 绕过路由
bypass-tun = 10.0.0.0/8,100.64.0.0/10,127.0.0.0/8,169.254.0.0/16,172.16.0.0/12,192.0.0.0/24,192.0.2.0/24,192.88.99.0/24,192.168.0.0/16,198.51.100.0/24,203.0.113.0/24,224.0.0.0/4,255.255.255.255/32
# DNS 服务器
dns-server = system
# doh-server = https://doh.pub/dns-query, https://1.12.12.12/dns-query, https://120.53.53.53/dns-query
# Hijack DNS
# 默认情况下，Loon 只返回发送到 Loon DNS 地址的 DNS 查询的假 IP 地址(198.18.0.2)。
# 有些设备或软件总是使用硬编码的 DNS 服务器。 (例如 Google Speakers 总是使用 8.8.8.8)。 您可以使用此选项劫持查询，以获得一个假地址。
hijack-dns = 8.8.8.8:53,8.8.4.4:53
# Wi-Fi 访问
allow-wifi-access = false
wifi-access-http-port = 1234
wifi-access-socks5-port = 1235
mitm-on-wifi-access = false
# 代理测速 URL
internet-test-url = http://connectivitycheck.platform.hicloud.com/generate_204
proxy-test-url = http://www.gstatic.com/generate_204
# 测速超时 (s)
test-timeout = 5
# 网络接口
interface-mode = auto
# ssid-trigger参数，用于指定SSID下流量模式切换，（default表示默认，cellular表示蜂窝，目前支持三种值：rule，direct，proxy） 
# ssid-trigger = "default":rule, "cellular":rule,"ASUS_5G":direct
# 解析器
resource-parser = https://raw.githubusercontent.com/sub-store-org/Sub-Store/release/sub-store-parser.loon.min.js
# 解决一些ip请求无法匹配域名类规则的问题。real-ip指定的域名将不返回fake ip响应，直接将dns请求发往目标dns服务器
# real-ip = *.lan, cable.auth.com, *.msftconnecttest.com, *.msftncsi.com, network-test.debian.org, detectportal.firefox.com, resolver1.opendns.com, *.srv.nintendo.net, *.stun.playstation.net, xbox.*.microsoft.com, *.xboxlive.com, stun.*, localhost.*.qq.com, *.logon.battlenet.com.cn, *.logon.battle.net, *.blzstatic.cn, *.cmpassport.com, id6.me, open.e.189.cn, mdn.open.wo.cn, auth.wosms.cn, *.jegotrip.com.cn, *.icitymobile.mobi, *.pingan.com.cn, *.cmbchina.com, *?miwifi.com, pool.ntp.org, *.pool.ntp.org, ntp.*.com, time.*.com, ntp?.*.com, time?.*.com, time.*.gov, time.*.edu.cn, *.ntp.org.cn, time.*.apple.com, PDC._msDCS.*.*, DC._msDCS.*.*, GC._msDCS.*.*

geoip-url = https://github.com/Hackl0us/GeoIP2-CN/raw/release/Country.mmdb
ipasn-url = https://raw.githubusercontent.com/P3TERX/GeoLite.mmdb/download/GeoLite2-ASN.mmdb

[Host]
# > 可以指定一下四种模式：
# 1、指定域名使用对应的IP地址
# 2、将域名指向另一个域名
# 3、指定域名请求DNS时使用特定的DNS服务器，格式为：google.com = server:8.8.8.8 或者 *.baidu.com = server:https://example.com/dns-query
# 4、指定具体的SSID环境下使用特定的DNS服务器
# ssid:LOON WIFI = server:system

# *.taobao.com = server:223.5.5.5
# mtalk.google.com = 108.177.125.188



# >手动添加的节点
[Proxy]
# 本地节点



# >机场订阅
[Remote Proxy]
# 订阅节点
# 别名 = 订阅URL



[Remote Filter]
# 筛选订阅节点，筛选后的结果可加入到策略组中，目前支持三种筛选方式
# NodeSelect: 使用在UI上选择的节点。
# NameKeyword: 根据提供的关键词对订阅中所有节点的名称进行筛选，使用筛选后的节点。
# NameRegex: 根据提供的正则表达式对订阅中所有节点的名称进行筛选，使用筛选后的节点。

# >通过正则方式筛选
Manual_Filter = NameRegex, FilterKey = "(.*)"
All_Filte = NameRegex, FilterKey = "|"
HK_Filter = NameRegex, FilterKey = "(?i)(港|HK|Hong|湾仔|港仔|九龙)"
TW_Filter = NameRegex, FilterKey = "(?i)(台|TW|Tai|台北|新竹|台中|桃园|台南|高雄|花莲)"
US_Filter = NameRegex, FilterKey = "(?i)(美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States)"
SG_Filter = NameRegex, FilterKey = "(?i)(新加坡|坡|狮城|SG|Singapore)"
UK_Filter = NameRegex, FilterKey = "(?i)(英国|UK|伦敦)"
RU_Filter = NameRegex, FilterKey = "(?i)(俄罗斯|RU|莫斯科|圣彼得堡|喀山|哈尔科夫|乌法|新西伯利亚|下诺夫哥罗德|沃罗涅什|Russia)"
JP_Filter = NameRegex, FilterKey = "(?i)(日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan|名古屋|福冈|仙台|京都|Japan)"
KR_Filter = NameRegex, FilterKey = "(?i)(韩|韓|KR|Korea|KOR|首尔|南韩|南朝鲜|釜山|South Korea)"
TU_Filter = NameRegex, FilterKey = "(?i)(土耳其|TU|Turkey)"
IN_Filter = NameRegex, FilterKey = "(?i)(印度|IN|IND|孟买|新德里|高知|Republic of India|India)"
DE_Filter = NameRegex, FilterKey = "(?i)(德国|DEU|DE|柏林|慕尼黑|汉堡|科隆|Germany)"
CA_Filter = NameRegex, FilterKey = "(?i)(加拿大|CA|渥太华)"



# >策略组
[Proxy Group]
# 节点选项
Global = select, Manual_Filter, AutoProxy, HK香港, TW台湾, US美国, SG新加坡, JP日本, KR韩国, UK英国, RU俄罗斯, TU土耳其, IN印度, DE德国, CA加拿大, DIRECT, img-url = globe
AutoProxy = url-test, All_Filte, tolerance=30, img-url = globe.badge.chevron.backward
HK香港 = url-test, HK_Filter, url = http://cp.cloudflare.com/generate_204, interval = 600, tolerance=30, img-url = h.square.fill
TW台湾 = url-test, TW_Filter, url = http://cp.cloudflare.com/generate_204, interval = 600, tolerance=30, img-url = t.square.fill
US美国 = url-test, US_Filter, url = http://cp.cloudflare.com/generate_204, interval = 600, tolerance=30, img-url = u.square.fill
SG新加坡 = url-test, SG_Filter, url = http://cp.cloudflare.com/generate_204, interval = 600, tolerance=30, img-url = s.square.fill
JP日本 = url-test, JP_Filter, url = http://cp.cloudflare.com/generate_204, interval = 600, tolerance=30, img-url = j.square.fill
KR韩国 = url-test, KR_Filter, url = http://cp.cloudflare.com/generate_204, interval = 600, tolerance=30, img-url = k.square.fill
RU俄罗斯 = select, RU_Filter, img-url = r.square.fill
TU土耳其 = select, TU_Filter, img-url = tugriksign.square.fill
UK英国 = select, UK_Filter, img-url = u.square.fill
IN印度 = select, IN_Filter, img-url = i.square.fill
DE德国 = select, DE_Filter, img-url = d.square.fill
CA加拿大 = select, CA_Filter, img-url = c.square.fill
Domestic = select, DIRECT, AutoProxy, img-url = mappin.and.ellipse
Advertising = select, REJECT, DIRECT, img-url = shield.slash.fill

# >本地分流规则
[Rule]
# Type:DOMAIN-SUFFIX, DOMAIN, DOMAIN-KEYWORD, USER-AGENT, URL-REGEX, IP-CIDR
# DOMAIN-KEYWORD,qq.com,DIRECT
# DOMAIN-KEYWORD,bilibili,DIRECT
# DOMAIN-KEYWORD,announce,DIRECT
# DOMAIN-KEYWORD,torrent,DIRECT
# DOMAIN-KEYWORD,tracker,DIRECT
# DOMAIN-SUFFIX,smtp,DIRECT
# URL-REGEX,(Subject|HELO|SMTP),DIRECT
# DOMAIN-SUFFIX,local,DIRECT
# IP-CIDR,10.0.0.0/8,DIRECT,no-resolve
# IP-CIDR,17.0.0.0/8,DIRECT,no-resolve
# IP-CIDR,100.64.0.0/10,DIRECT,no-resolve
# IP-CIDR,127.0.0.0/8,DIRECT,no-resolve
# IP-CIDR,172.16.0.0/12,DIRECT,no-resolve
# IP-CIDR,192.168.0.0/16,DIRECT,no-resolve
GEOIP,CN,DIRECT
FINAL,Global



# >分流规则 远程订阅
[Remote Rule]
# 本地局域网络-直连
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Lan/Lan.list, policy=DIRECT, tag=本地网络-直连, enabled=true
# 去广告白名单-直连
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Direct/Direct.list, policy=DIRECT, tag=去广告白名单-直连, enabled=true
# BlockHttpDNS
# https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/BlockHttpDNS/BlockHttpDNS.list, tag=BlockHttpDNS-拦截, policy=REJECT, enabled=true
# Advertising 广告
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/AdvertisingLite/AdvertisingLite_Domain.list, tag=去广告Domain-拦截, policy=REJECT, enabled=true
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/AdvertisingLite/AdvertisingLite.list, tag=去广告-拦截, policy=REJECT, enabled=true
# 去隐私追踪-拦截
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Privacy/Privacy_Domain.list, tag=去隐私追踪Domain-拦截, policy=REJECT, enabled=true
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Privacy/Privacy.list, tag=去隐私追踪-拦截, policy=REJECT, enabled=true
# 反劫持-拦截
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Hijacking/Hijacking.list, tag=反劫持-拦截, policy=REJECT, enabled=true

# Apple-直连
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Apple/Apple_Domain.list, policy=DIRECT, tag=AppleDomain-直连, enabled=true
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Apple/Apple.list, policy=DIRECT, tag=Apple-直连, enabled=true
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/AppStore/AppStore.list, policy=DIRECT, tag=AppStore-直连, enabled=true

# 电报规则-代理
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Telegram/Telegram.list, policy=AutoProxy, tag=电报-代理, enabled=true
# 油管规则-代理
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/YouTube/YouTube.list, policy=Global, tag=油管-代理, enabled=true
# 谷歌规则-代理
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Google/Google.list, policy=Global, tag=谷歌-代理, enabled=true
# 推特规则-代理
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Twitter/Twitter.list, policy=Global, tag=推特-代理, enabled=true
# 脸书规则-代理
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Facebook/Facebook.list, policy=Global, tag=脸书-代理, enabled=true
# Instagram规则-代理
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Instagram/Instagram.list, policy=Global, tag=Instagram-代理, enabled=true
# 国外媒体-代理
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/GlobalMedia/GlobalMedia_Domain.list, policy=Global, tag=国外媒体Domain-代理, enabled=true
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/GlobalMedia/GlobalMedia.list, policy=Global, tag=国外媒体-代理, enabled=true
# 国外域名等规则-代理
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Global/Global_Domain.list, policy=Global, tag=国外Domain-代理, enabled=true
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Global/Global.list, policy=Global, tag=国外-代理, enabled=true
# 国内域名-直连
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/China/China_Domain.list, policy=DIRECT, tag=国内Domain-直连, enabled=true
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/China/China.list, policy=DIRECT, tag=国内-直连, enabled=true
# 国内IP段-直连
# https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/ChinaIPs/ChinaIPs.list, policy=DIRECT, tag=国内IP段-直连, enabled=true


# >本地复写
[Rewrite]
# Redirect Google Search Service
# ^https?:\/\/(www.)?(g|google)\.cn https://www.google.com 302


# >远程复写
[Remote Rewrite]
# 订阅 URL Rewrite
# 订阅url,别名(可选)
# https://raw.githubusercontent.com/Loon0x00/LoonExampleConfig/master/Rewrite/AutoRewrite_Example.list,tag=auto,enable=true

# >本地脚本
[Script]
# http-request 处理请求的脚本
# http-response 处理请求响应的脚本
# cron 定时脚本
# network-changed   网络发生变化触发脚本
# generic  通用型脚本，可用在操作节点/策略组中，执行是会带入节点名称和策略组名称，脚本必须在开启NE时
# http-request ^https?:\/\/(www.)?(example)\.com script-path=localscript.js,tag = requestScript,enable=true
# http-response ^https?:\/\/(www.)?(example)\.com script-path=https://example.com/loon.js,timeout=10,requires-body = true,tag = responseScript,enable=true
# cron "0 8 * * *" script-path=cron.js,tag = responseScript,enable=true
# network-changed script-path=https://raw.githubusercontent.com/Loon0x00/LoonExampleConfig/master/Script/netChanged.js, tag=changeModel,enable=true
# generic script-path=https://raw.githubusercontent.com/Loon0x00/LoonExampleConfig/master/Script/generic_example.js,tag=GeoLocation,timeout=10,img-url=location.fill.viewfinder.system




# >远程脚本订阅
[Remote Script]
# https://example.com/loon.js, tag=scripts, enable=true




# >插件(类似Surge的模块)
[Plugin]
# plugin-url tag=tag,proxy=插件中PROXY所指向的策略,enable=true
# plugin策略可设置为DIRECT,REJECT,PROXY，其中PROXY为用户在app中手动映射的策略，rule后不跟随策略默认使用PROXY
# https://raw.githubusercontent.com/chavyleung/scripts/master/box/rewrite/boxjs.rewrite.loon.tf.plugin, tag=BoxJS_TF版, enabled=false
# https://raw.githubusercontent.com/Peng-YM/Sub-Store/master/config/Loon.plugin, tag=Sub-Store订阅, enabled=false

https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rewrite/Loon/BlockHTTPDNS/BlockHTTPDNS.plugin, tag=BlockHTTPDNS, enable=true
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/AdvertisingLite/AdvertisingLite_MITM.plugin, tag=AdvertisingLite_MITM, enable=true
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/GlobalMedia/GlobalMedia_MITM.plugin, tag=GlobalMedia_MITM, enable=true
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rewrite/Loon/AdvertisingLite/AdvertisingLite.plugin, tag=重写去广告, enable=true
# https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rewrite/Loon/AdvertisingScript/AdvertisingScript.plugin, tag=脚本去广告, enable=true
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rewrite/Loon/SafeRedirect/SafeRedirect.plugin, tag=重定向, enable=true
https://raw.githubusercontent.com/deezertidal/private/main/Emby.plugin, tag=Emby, enable=true
https://raw.githubusercontent.com/deezertidal/private/main/CamScanner.plugin, tag=扫描全能王, enable=true
https://raw.githubusercontent.com/deezertidal/private/master/plugallery/wechatad.plugin, tag=微信公众号去广告, enable=true
https://raw.githubusercontent.com/deezertidal/private/master/plugallery/weiboad.plugin, tag=微博去广告, enable=true
https://raw.githubusercontent.com/app2smile/rules/master/plugin/tieba.plugin, tag=贴吧去广告, enable=true
https://raw.githubusercontent.com/zqzess/rule_for_quantumultX/master/Loon/Plugin/zhihu.plugin, tag=知乎去广告, enable=true
https://raw.githubusercontent.com/deezertidal/private/master/plugallery/gddt.plugin, tag=高德去广告, enabled=true
https://raw.githubusercontent.com/deezertidal/private/master/plugallery/aptv.plugin, tag=APTV, enabled=true
# Peng-YM/Loon-Gallery插件仓库，访问hostname=xn--ck8h.com安装
https://raw.githubusercontent.com/Loon0x00/Loon-Gallery/master/loon-gallery.plugin, policy=Global, tag=插件仓库, enable=true



[MITM]
skip-server-cert-verify = true
